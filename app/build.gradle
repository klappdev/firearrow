plugins {
    id 'com.android.application'

    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs'
    id 'com.google.protobuf'
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion "30.0.3"
    namespace "org.kl.firearrow"

    defaultConfig {
        applicationId "org.kl.firearrow"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags '-std=c++2a'

                arguments "-DENABLE_CPP_TESTS=" + getEnableNativeTests().toString()
                arguments "-DANDROID_SDK_ROOT=" + getAndroidSdkRoot().toString()
            }
        }
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }
    buildFeatures {
        viewBinding true
        dataBinding true
        buildConfig true
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$rootProject.protocVersion"
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //Kotlin
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.10"))
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.10"

    // Base
    implementation "androidx.startup:startup-runtime:$rootProject.appStartupVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"

    // Ui
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "androidx.preference:preference:$rootProject.preferenceVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"

    // Protobuf
    implementation "com.google.protobuf:protobuf-javalite:$rootProject.protobufLiteVersion"
    implementation "com.jakewharton.timber:timber:$timberVersion"

    // Lombok
    compileOnly "org.projectlombok:lombok:$rootProject.lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$rootProject.lombokVersion"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-livedata:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"

    // Glide
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.glideVersion"
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"

    // Hilt
    annotationProcessor "com.google.dagger:hilt-android-compiler:$rootProject.hiltVersion"
    implementation "com.google.dagger:hilt-android:$rootProject.hiltVersion"
    androidTestAnnotationProcessor "com.google.dagger:hilt-android-compiler:$rootProject.hiltVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$rootProject.hiltVersion"

    // Navigation
    implementation "androidx.navigation:navigation-fragment:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-ui:$rootProject.navigationVersion"

    // Paging 3
    implementation "androidx.paging:paging-runtime:$rootProject.pagingVersion"
    implementation "androidx.paging:paging-rxjava3:$rootProject.pagingVersion"

    // RxJava 3
    implementation "io.reactivex.rxjava3:rxjava:$rootProject.rxJavaVersion"
    implementation "io.reactivex.rxjava3:rxandroid:$rootProject.rxAndroidVersion"

    // Worker
    implementation "androidx.work:work-runtime:$rootProject.workVersion"
    implementation "androidx.work:work-rxjava3:$rootProject.workVersion"
    androidTestImplementation "androidx.work:work-testing:$rootProject.workVersion"

    // Room
    annotationProcessor "androidx.room:room-compiler:$rootProject.roomVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-rxjava3:$rootProject.roomVersion"
    implementation "androidx.room:room-paging:$rootProject.roomVersion"
    testImplementation "androidx.room:room-testing:$rootProject.roomVersion"

    // DataStore
    implementation "androidx.datastore:datastore:$rootProject.dataStoreVersion"
    implementation "androidx.datastore:datastore-rxjava3:$rootProject.dataStoreVersion"

    // Gson
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"

    // Test
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.testCoreVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.testExtJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.robolectricVersion"
}

def getEnableNativeTests() {
    return getNativeProperties().getProperty('enableCppTests', 'true').toBoolean()
}

def getAndroidSdkRoot() {
    return getNativeProperties().getProperty('sdk.dir', '').toString()
}

def getNativeProperties() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + '/local.properties').newDataInputStream())
    return properties
}